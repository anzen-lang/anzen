// struct Foo {
//   new() {
//     bar := 1
//     // this.baz := 1
//   }
//   let bar: Int
// }
//
// fun main() {
//   let foo <- Foo()
//   let a &- foo.bar
// }
//
// union Optional<Value> {
//
//   case struct Some {
//     new(value: Value) {
//       self.value := value
//     }
//
//     let value: Value
//   }
//
//   case struct None {
//     new() {}
//   }
//
//   fun map<T>(_ fn: (_: Value) -> T) -> Optional<Value=T> {
//     if self is Some {
//       let some := (self as! Some)
//       return <- Some<Value=T>(value <- fn(some.value))
//     } else {
//       return <- None<Value=T>()
//     }
//   }
//
// }
//
// struct Box<C> {
//   new() {
//     // self.container <- 1
//     container <- 2
//   }
//   let container: Int
// }
//
// union IntOrBool {
//   case Int
//   case Bool
// }
//
// fun main() {
//
//   // fun mono(x: Int) -> Int {
//   //   return <- x
//   // }
//   // let a <- mono(x <- 1)
//
//   let a: Box<C=Int>
//   let b: Anything <- Box<C=Int>()
//   let c &- a.container
//
//   fun poly(x: Int) -> Float {
//     return <- 0.0
//   }
//   fun poly<T>(x: T) -> T {
//     return <- x
//   }
//   let w <- poly(x <- 1)
//   let x <- poly(x <- "1")
//   let y <- poly(x <- true)
//   let z <- poly<T=@mut Int, U=Bool>(x <- 1)
//
// }
