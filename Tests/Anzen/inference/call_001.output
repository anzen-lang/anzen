(module_decl id='inference/call_001' inner_scope='inference/call_001'
  (fun_decl 'mono' type='(x: Int) -> Int' symbol='mono' scope='inference/call_001' inner_scope='inference/call_001.mono'
    (parameters
      (param_decl 'x' type='Int' symbol='x' scope='inference/call_001.mono'
        (type_annotation
          (qual_sign
            (identifier 'Int' type='Int.metatype' scope='anzen://builtin')))))
    (codomain
      (qual_sign
        (identifier 'Int' type='Int.metatype' scope='anzen://builtin'))))
  (fun_decl 'mono' type='(x: Bool) -> Bool' symbol='mono' scope='inference/call_001' inner_scope='inference/call_001.mono'
    (parameters
      (param_decl 'x' type='Bool' symbol='x' scope='inference/call_001.mono'
        (type_annotation
          (qual_sign
            (identifier 'Bool' type='Bool.metatype' scope='anzen://builtin')))))
    (codomain
      (qual_sign
        (identifier 'Bool' type='Bool.metatype' scope='anzen://builtin'))))
  (prop_decl let 'a' type='Int' symbol='a' scope='inference/call_001'
    (initial_binding
      (binding_operator =)
      (call type='Int'
        (callee
          (identifier 'mono' type='(x: Int) -> Int' scope='inference/call_001'))
        (arguments
          (call_arg 'x' type='Int'
            (binding_operator =)
            (int_literal 0 type='Int'))))))
  (prop_decl let 'b' type='Bool' symbol='b' scope='inference/call_001'
    (initial_binding
      (binding_operator =)
      (call type='Bool'
        (callee
          (identifier 'mono' type='(x: Bool) -> Bool' scope='inference/call_001'))
        (arguments
          (call_arg 'x' type='Bool'
            (binding_operator =)
            (bool_literal true type='Bool')))))))
