(module_decl id='inference.construction_002' inner_scope='inference.construction_002'
  (struct_decl 'Box' type='Box<T>.metatype' symbol='Box' scope='inference.construction_002' inner_scope='inference.construction_002.Box'
    (placeholders
      (placeholder T))
    (body
      (block inner_scope='inference.construction_002.Box.block'
          (constructor_decl 'new' type='<T> (value: T) -> <T=T>Box<T>' symbol='new' scope='inference.construction_002.Box.block' inner_scope='inference.construction_002.Box.block.new'
            (parameters
              (param_decl 'value' type='T' symbol='value' scope='inference.construction_002.Box.block.new'
                (type_annotation
                  (qual_type_sign
                    (type_identifier 'T' type='T.metatype' scope='inference.construction_002.Box')))))
            (body
              (block inner_scope='inference.construction_002.Box.block.new.block'))))))
  (prop_decl let 'int_box' type='<T=Int>Box<T>' symbol='int_box' scope='inference.construction_002'
    (initial_binding
      (binding_operator =)
      (call type='<T=Int>Box<T>'
        (callee
          (identifier 'Box' type='(value: Int) -> <T=Int>Box<T>' scope='inference.construction_002'))
        (arguments
          (call_arg 'value' type='Int'
            (binding_operator =)
            (int_literal 0 type='Int'))))))
  (prop_decl let 'string_box' type='<T=String>Box<T>' symbol='string_box' scope='inference.construction_002'
    (initial_binding
      (binding_operator =)
      (call type='<T=String>Box<T>'
        (callee
          (identifier 'Box' type='(value: String) -> <T=String>Box<T>' scope='inference.construction_002'))
        (arguments
          (call_arg 'value' type='String'
            (binding_operator =)
            (string_literal "Hello, World!" type='String')))))))
