(module_decl id='inference.call_003' inner_scope='inference.call_003'
  (function_decl 'poly' type='<T> (x: T) -> T' symbol='poly' scope='inference.call_003' inner_scope='inference.call_003.poly'
    (placeholders
      (placeholder T))
    (parameters
      (param_decl 'x' type='T' symbol='x' scope='inference.call_003.poly'
        (type_annotation
          (qual_type_sign
            (type_identifier 'T' type='T.metatype' scope='inference.call_003.poly')))))
    (codomain
      (qual_type_sign
        (type_identifier 'T' type='T.metatype' scope='inference.call_003.poly'))))
  (prop_decl let 'a' type='Int' symbol='a' scope='inference.call_003'
    (initial_binding
      (binding_operator =)
      (call type='Int'
        (callee
          (identifier 'poly' type='(x: Int) -> Int' scope='inference.call_003'))
        (arguments
          (call_arg 'x' type='Int'
            (binding_operator =)
            (int_literal 0 type='Int'))))))
  (prop_decl let 'b' type='Bool' symbol='b' scope='inference.call_003'
    (initial_binding
      (binding_operator =)
      (call type='Bool'
        (callee
          (identifier 'poly' type='(x: Bool) -> Bool' scope='inference.call_003'))
        (arguments
          (call_arg 'x' type='Bool'
            (binding_operator =)
            (call type='Bool'
              (callee
                (identifier 'poly' type='(x: Bool) -> Bool' scope='inference.call_003'))
              (arguments
                (call_arg 'x' type='Bool'
                  (binding_operator =)
                  (bool_literal true type='Bool'))))))))))
