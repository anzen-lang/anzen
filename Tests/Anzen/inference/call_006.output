(module_decl id='inference/call_006' inner_scope='inference/call_006'
  (function_decl 'overloaded' type='(x: T) -> T' symbol='overloaded' scope='inference/call_006' inner_scope='inference/call_006.overloaded'
    (placeholders
      (placeholder T))
    (parameters
      (param_decl 'x' type='T' symbol='x' scope='inference/call_006.overloaded'
        (type_annotation
          (qual_sign
            (identifier 'T' type='T.metatype' scope='inference/call_006.overloaded')))))
    (codomain
      (qual_sign
        (identifier 'T' type='T.metatype' scope='inference/call_006.overloaded'))))
  (function_decl 'overloaded' type='(x: Int) -> Int' symbol='overloaded' scope='inference/call_006' inner_scope='inference/call_006.overloaded'
    (parameters
      (param_decl 'x' type='Int' symbol='x' scope='inference/call_006.overloaded'
        (type_annotation
          (qual_sign
            (identifier 'Int' type='Int.metatype' scope='anzen://builtin')))))
    (codomain
      (qual_sign
        (identifier 'Int' type='Int.metatype' scope='anzen://builtin'))))
  (function_decl 'overloaded' type='(x: Bool) -> Bool' symbol='overloaded' scope='inference/call_006' inner_scope='inference/call_006.overloaded'
    (parameters
      (param_decl 'x' type='Bool' symbol='x' scope='inference/call_006.overloaded'
        (type_annotation
          (qual_sign
            (identifier 'Bool' type='Bool.metatype' scope='anzen://builtin')))))
    (codomain
      (qual_sign
        (identifier 'Bool' type='Bool.metatype' scope='anzen://builtin'))))
  (prop_decl let 'a' type='Int' symbol='a' scope='inference/call_006'
    (initial_binding
      (binding_operator =)
      (call type='Int'
        (callee
          (identifier 'overloaded' type='(x: Int) -> Int' scope='inference/call_006'))
        (arguments
          (call_arg 'x' type='Int'
            (binding_operator =)
            (int_literal 0 type='Int'))))))
  (prop_decl let 'b' type='Bool' symbol='b' scope='inference/call_006'
    (initial_binding
      (binding_operator =)
      (call type='Bool'
        (callee
          (identifier 'overloaded' type='(x: Bool) -> Bool' scope='inference/call_006'))
        (arguments
          (call_arg 'x' type='Bool'
            (binding_operator =)
            (bool_literal true type='Bool'))))))
  (prop_decl let 'c' type='String' symbol='c' scope='inference/call_006'
    (initial_binding
      (binding_operator =)
      (call type='String'
        (callee
          (identifier 'overloaded' type='(x: String) -> String' scope='inference/call_006'))
        (arguments
          (call_arg 'x' type='String'
            (binding_operator =)
            (string_literal "Hello" type='String')))))))
