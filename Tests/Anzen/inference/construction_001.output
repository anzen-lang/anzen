(module_decl id='inference.construction_001' inner_scope='inference.construction_001'
  (struct_decl 'Point' type='Point.metatype' symbol='Point' scope='inference.construction_001' inner_scope='inference.construction_001.Point'
    (body
      (block inner_scope='inference.construction_001.Point.block'
          (constructor_decl 'new' type='(x: Int, y: Int) -> Point' symbol='new' scope='inference.construction_001.Point.block' inner_scope='inference.construction_001.Point.block.new'
            (parameters
              (param_decl 'x' type='Int' symbol='x' scope='inference.construction_001.Point.block.new'
                (type_annotation
                  (qual_type_sign
                    (type_identifier 'Int' type='Int.metatype' scope='__builtin'))))
              (param_decl 'y' type='Int' symbol='y' scope='inference.construction_001.Point.block.new'
                (type_annotation
                  (qual_type_sign
                    (type_identifier 'Int' type='Int.metatype' scope='__builtin')))))
            (body
              (block inner_scope='inference.construction_001.Point.block.new.block'))))))
  (prop_decl 'pt' type='Point' symbol='pt' scope='inference.construction_001'
    (initial_binding
      (binding_operator :=)
      (call type='Point'
        (callee
          (identifier 'Point' type='(x: Int, y: Int) -> Point' scope='inference.construction_001'))
        (arguments
          (call_arg 'x' type='Int'
            (binding_operator :=)
            (int_literal 0 type='Int'))
          (call_arg 'y' type='Int'
            (binding_operator :=)
            (int_literal 0 type='Int')))))))
