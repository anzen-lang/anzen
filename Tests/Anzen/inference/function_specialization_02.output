(fun_decl regular name='poly' type='@cst <T>(x: @cst T) -> @cst T'
  (generic_params
    (generic_param_decl name='T' type='T'))
  (params
    (param_decl name='x' type='@cst T'
      (sign
        (qual_type_sign type='@cst T'
          (type_ident name='T' type='T' decl='function_specialization_02::poly(x:)::T')))))
  (codom
    (qual_type_sign type='@cst T'
      (type_ident name='T' type='T' decl='function_specialization_02::poly(x:)::T')))
  (body
    (brace_stmt
      (return_stmt
        (binding
          (ident_expr name='<-' type='@cst (_: @cst Anything, _: @cst Anything) -> @cst Anything' decl='_')
        (ident_expr name='x' type='@cst T' decl='function_specialization_02::poly(x:)::x'))))))
(prop_decl name='a' type='@cst Int'
  (initializer
    (ident_expr name='<-' type='@cst (_: @cst Anything, _: @cst Anything) -> @cst Anything' decl='_')
    (call_expr type='@cst Int'
      (callee
        (ident_expr name='poly' type='@cst <T=@cst Int>(x: @cst T) -> @cst T' decl='function_specialization_02::poly(x:)'))
      (args
        (call_arg_expr 'x' type='@cst Int'
          (op
            (ident_expr name='<-' type='@cst (_: @cst Anything, _: @cst Anything) -> @cst Anything' decl='_'))
          (value
            (int_lit_expr value='0' type='@cst Int')))))))
(prop_decl name='b' type='@cst Bool'
  (initializer
    (ident_expr name='<-' type='@cst (_: @cst Anything, _: @cst Anything) -> @cst Anything' decl='_')
    (call_expr type='@cst Bool'
      (callee
        (ident_expr name='poly' type='@cst <T=@cst Bool>(x: @cst T) -> @cst T' decl='function_specialization_02::poly(x:)'))
      (args
        (call_arg_expr 'x' type='@cst Bool'
          (op
            (ident_expr name='<-' type='@cst (_: @cst Anything, _: @cst Anything) -> @cst Anything' decl='_'))
          (value
            (call_expr type='@cst Bool'
              (callee
                (ident_expr name='poly' type='@cst <T=@cst Bool>(x: @cst T) -> @cst T' decl='function_specialization_02::poly(x:)'))
              (args
                (call_arg_expr 'x' type='@cst Bool'
                  (op
                    (ident_expr name='<-' type='@cst (_: @cst Anything, _: @cst Anything) -> @cst Anything' decl='_'))
                  (value
                    (bool_lit_expr value='true' type='@cst Bool')))))))))))
