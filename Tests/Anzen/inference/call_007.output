(module_decl id='inference.call_007' inner_scope='inference.call_007'
  (struct_decl 'Box' type='Box<T>.metatype' symbol='Box' scope='inference.call_007' inner_scope='inference.call_007.Box'
    (placeholders
      (placeholder T))
    (body
      (block inner_scope='inference.call_007.Box.block'
          (prop_decl 'clone' type='Box<T=T>' symbol='clone' scope='inference.call_007.Box.block'
            (type_annotation
              (qual_type_sign
                (type_identifier 'Self' type='Box<T=T>.metatype' scope='inference.call_007.Box'))))
          (method_decl 'f' type='<T> (_: Box<T=T>) -> (x: Box<T=T>) -> T' symbol='f' scope='inference.call_007.Box.block' inner_scope='inference.call_007.Box.block.f'
            (parameters
              (param_decl 'x' type='Box<T=T>' symbol='x' scope='inference.call_007.Box.block.f'
                (type_annotation
                  (qual_type_sign
                    (type_identifier 'Self' type='Box<T=T>.metatype' scope='inference.call_007.Box')))))
            (codomain
              (qual_type_sign
                (type_identifier 'T' type='T.metatype' scope='inference.call_007.Box')))))))
  (prop_decl 'box' type='Box<T=Int>' symbol='box' scope='inference.call_007'
    (type_annotation
      (qual_type_sign
        (type_identifier 'Box' type='Box<T=Int>.metatype' scope='inference.call_007'))))
  (prop_decl 'val' type='Int' symbol='val' scope='inference.call_007'
    (initial_binding
      (binding_operator :=)
      (call type='Int'
        (callee
          (select type='(x: Box<T=Int>) -> Int'
            (owner
              (identifier 'box' type='Box<T=Int>' scope='inference.call_007'))
            (ownee
              (identifier 'f' type='(x: Box<T=Int>) -> Int' scope='inference.call_007.Box.block'))))
        (arguments
          (call_arg 'x' type='Box<T=Int>'
            (binding_operator :=)
            (identifier 'box' type='Box<T=Int>' scope='inference.call_007')))))))
