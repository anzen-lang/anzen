(module_decl id='inference/call_005' inner_scope='inference/call_005'
  (function_decl 'poly' type='(x: T, y: T) -> T' symbol='poly' scope='inference/call_005' inner_scope='inference/call_005.poly'
    (placeholders
      (placeholder T))
    (parameters
      (param_decl 'x' type='T' symbol='x' scope='inference/call_005.poly'
        (type_annotation
          (qual_sign
            (identifier 'T' type='T.metatype' scope='inference/call_005.poly'))))
      (param_decl 'y' type='T' symbol='y' scope='inference/call_005.poly'
        (type_annotation
          (qual_sign
            (identifier 'T' type='T.metatype' scope='inference/call_005.poly')))))
    (codomain
      (qual_sign
        (identifier 'T' type='T.metatype' scope='inference/call_005.poly'))))
  (prop_decl let 'a' type='Int' symbol='a' scope='inference/call_005'
    (initial_binding
      (binding_operator =)
      (call type='Int'
        (callee
          (identifier 'poly' type='(x: Int, y: Int) -> Int' scope='inference/call_005'))
        (arguments
          (call_arg 'x' type='Int'
            (binding_operator =)
            (int_literal 0 type='Int'))
          (call_arg 'y' type='Int'
            (binding_operator =)
            (int_literal 0 type='Int'))))))
  (prop_decl let 'b' type='Bool' symbol='b' scope='inference/call_005'
    (initial_binding
      (binding_operator =)
      (call type='Bool'
        (callee
          (identifier 'poly' type='(x: Bool, y: Bool) -> Bool' scope='inference/call_005'))
        (arguments
          (call_arg 'x' type='Bool'
            (binding_operator =)
            (bool_literal true type='Bool'))
          (call_arg 'y' type='Bool'
            (binding_operator =)
            (bool_literal false type='Bool'))))))
  (prop_decl let 'c' type='Anything' symbol='c' scope='inference/call_005'
    (initial_binding
      (binding_operator =)
      (call type='Anything'
        (callee
          (identifier 'poly' type='(x: Anything, y: Anything) -> Anything' scope='inference/call_005'))
        (arguments
          (call_arg 'x' type='Int'
            (binding_operator =)
            (int_literal 0 type='Int'))
          (call_arg 'y' type='Bool'
            (binding_operator =)
            (bool_literal false type='Bool')))))))
