(struct_decl name='Box' type='Box<T>'
  (generic_params
    (generic_param_decl name='T' type='T'))
  (body
    (brace_stmt
      (prop_decl name='clone' type='@cst Box<T=@cst $1>'
        (sign
          (qual_type_sign type='@cst Box<T=@cst $1>'
            (type_ident name='Self' type='Box<T=@cst $1>' decl='method_specialization::Box'))))
      (prop_decl name='value' type='@cst T'
        (sign
          (qual_type_sign type='@cst T'
            (type_ident name='T' type='T' decl='method_specialization::Box::T'))))
      (fun_decl method name='f' type='@cst (_: @cst Box<T>) -> @cst (x: @cst Box<T=@cst $2>) -> @cst T'
        (params
          (param_decl name='x' type='@cst Box<T=@cst $2>'
            (sign
              (qual_type_sign type='@cst Box<T=@cst $2>'
                (type_ident name='Self' type='Box<T=@cst $2>' decl='method_specialization::Box')))))
        (codom
          (qual_type_sign type='@cst T'
            (type_ident name='T' type='T' decl='method_specialization::Box::T')))))))
(prop_decl name='box' type='@cst Box<T=@cst Int>'
  (sign
    (qual_type_sign type='@cst Box<T=@cst Int>'
      (type_ident name='Box' type='Box<T=@cst Int>' decl='method_specialization::Box'
        (spec_args key='T'
          (qual_type_sign type='@cst Int'
            (type_ident name='Int' type='Int' decl='__Builtin::Int')))))))
(prop_decl name='val' type='@cst Int'
  (initializer
    (ident_expr name='<-' type='@cst (_: @cst Anything, _: @cst Anything) -> @cst Anything' decl='_')
    (call_expr type='@cst Int'
      (callee
        (select_expr type='@cst <T=@cst Int>(x: @cst Box<T=@cst $2>) -> @cst T'
          (owner
            (ident_expr name='box' type='@cst Box<T=@cst Int>' decl='method_specialization::box'))
          (ownee
            (ident_expr name='f' type='@cst <T=@cst Int>(x: @cst Box<T=@cst $2>) -> @cst T' decl='_'))))
      (args
        (call_arg_expr 'x' type='@cst Box<T=@cst Int>'
          (op
            (ident_expr name='<-' type='@cst (_: @cst Anything, _: @cst Anything) -> @cst Anything' decl='_'))
          (value
            (ident_expr name='box' type='@cst Box<T=@cst Int>' decl='method_specialization::box')))))))
